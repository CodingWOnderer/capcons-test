/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/root'
import { Route as middlewaresAuthenticateRouteImport } from './pages/middlewares/authenticate'
import { Route as authSignupRouteRouteImport } from './pages/auth/Signup/route'
import { Route as authLoginPageRouteRouteImport } from './pages/auth/LoginPage/route'
import { Route as authForgotPasswordRouteRouteImport } from './pages/auth/ForgotPassword/route'
import { Route as authCirclecreationRouteRouteImport } from './pages/auth/circlecreation/route'
import { Route as indexRouteImport } from './pages/index'
import { Route as circleRouteRouteImport } from './pages/circle/route'
import { Route as circleDashboardCircleidRouteImport } from './pages/circle/dashboard/$circleid'

const middlewaresAuthenticateRoute = middlewaresAuthenticateRouteImport.update({
  id: '/_authenticate',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRouteRoute = authSignupRouteRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginPageRouteRoute = authLoginPageRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRouteRoute = authForgotPasswordRouteRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const authCirclecreationRouteRoute = authCirclecreationRouteRouteImport.update({
  id: '/circlecreation',
  path: '/circlecreation',
  getParentRoute: () => rootRouteImport,
} as any)
const indexRoute = indexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => middlewaresAuthenticateRoute,
} as any)
const circleRouteRoute = circleRouteRouteImport.update({
  id: '/circle/',
  path: '/circle/',
  getParentRoute: () => middlewaresAuthenticateRoute,
} as any)
const circleDashboardCircleidRoute = circleDashboardCircleidRouteImport.update({
  id: '/circle/$circleid/',
  path: '/circle/$circleid/',
  getParentRoute: () => middlewaresAuthenticateRoute,
} as any)

export interface FileRoutesByFullPath {
  '/circlecreation': typeof authCirclecreationRouteRoute
  '/forgot-password': typeof authForgotPasswordRouteRoute
  '/login': typeof authLoginPageRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/': typeof indexRoute
  '/circle': typeof circleRouteRoute
  '/circle/$circleid': typeof circleDashboardCircleidRoute
}
export interface FileRoutesByTo {
  '/circlecreation': typeof authCirclecreationRouteRoute
  '/forgot-password': typeof authForgotPasswordRouteRoute
  '/login': typeof authLoginPageRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/': typeof indexRoute
  '/circle': typeof circleRouteRoute
  '/circle/$circleid': typeof circleDashboardCircleidRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/circlecreation': typeof authCirclecreationRouteRoute
  '/forgot-password': typeof authForgotPasswordRouteRoute
  '/login': typeof authLoginPageRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/_authenticate': typeof middlewaresAuthenticateRouteWithChildren
  '/_authenticate/': typeof indexRoute
  '/_authenticate/circle/': typeof circleRouteRoute
  '/_authenticate/circle/$circleid/': typeof circleDashboardCircleidRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/circlecreation'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/'
    | '/circle'
    | '/circle/$circleid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/circlecreation'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/'
    | '/circle'
    | '/circle/$circleid'
  id:
    | '__root__'
    | '/circlecreation'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/_authenticate'
    | '/_authenticate/'
    | '/_authenticate/circle/'
    | '/_authenticate/circle/$circleid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authCirclecreationRouteRoute: typeof authCirclecreationRouteRoute
  authForgotPasswordRouteRoute: typeof authForgotPasswordRouteRoute
  authLoginPageRouteRoute: typeof authLoginPageRouteRoute
  authSignupRouteRoute: typeof authSignupRouteRoute
  middlewaresAuthenticateRoute: typeof middlewaresAuthenticateRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticate': {
      id: '/_authenticate'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof middlewaresAuthenticateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginPageRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/circlecreation': {
      id: '/circlecreation'
      path: '/circlecreation'
      fullPath: '/circlecreation'
      preLoaderRoute: typeof authCirclecreationRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticate/': {
      id: '/_authenticate/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexRouteImport
      parentRoute: typeof middlewaresAuthenticateRoute
    }
    '/_authenticate/circle/': {
      id: '/_authenticate/circle/'
      path: '/circle'
      fullPath: '/circle'
      preLoaderRoute: typeof circleRouteRouteImport
      parentRoute: typeof middlewaresAuthenticateRoute
    }
    '/_authenticate/circle/$circleid/': {
      id: '/_authenticate/circle/$circleid/'
      path: '/circle/$circleid'
      fullPath: '/circle/$circleid'
      preLoaderRoute: typeof circleDashboardCircleidRouteImport
      parentRoute: typeof middlewaresAuthenticateRoute
    }
  }
}

interface middlewaresAuthenticateRouteChildren {
  indexRoute: typeof indexRoute
  circleRouteRoute: typeof circleRouteRoute
  circleDashboardCircleidRoute: typeof circleDashboardCircleidRoute
}

const middlewaresAuthenticateRouteChildren: middlewaresAuthenticateRouteChildren =
  {
    indexRoute: indexRoute,
    circleRouteRoute: circleRouteRoute,
    circleDashboardCircleidRoute: circleDashboardCircleidRoute,
  }

const middlewaresAuthenticateRouteWithChildren =
  middlewaresAuthenticateRoute._addFileChildren(
    middlewaresAuthenticateRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  authCirclecreationRouteRoute: authCirclecreationRouteRoute,
  authForgotPasswordRouteRoute: authForgotPasswordRouteRoute,
  authLoginPageRouteRoute: authLoginPageRouteRoute,
  authSignupRouteRoute: authSignupRouteRoute,
  middlewaresAuthenticateRoute: middlewaresAuthenticateRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
